#!/usr/bin/perl

# This script obtains all perfSONAR meshes and their respective members (nodes)

# Usage:
# ./update_meshes

# Input:
# None provided. Data obtained directly from mesh repository.
# See $PSMESH_LINK

# Output:
# A JSON formatted file having the form:
#{
#    "USATLAS Latency Mesh Test": {
#         "members": [
#             "lhcperfmon.bnl.gov",
#             "uct2-net1.mwt2.org",
#             "iut2-net1.iu.edu",
#             "mwt2-ps01.campuscluster.illinois.edu",
#             "psnr-farm10.slac.stanford.edu",
#             "psum01.aglt2.org",
#             "psmsu01.aglt2.org",
#             "ps1.ochep.ou.edu",
#             "psuta01.atlas-swt2.org",
#             "lutps1.lunet.edu",
#             "atlas-npt1.bu.edu"
#         ],
#         "type": "mesh"
#    },
# ...
#}


# TODO
# use library

# The links below are available from http://myosg.grid.iu.edu/pfmesh

# USATLAS Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/us-atlas
# USCMS Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/us-cms
# CA Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/ca-all
# DE Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/de-all
# ES Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/es-all
# FR Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/fr-all
# IT ATLAS Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/it-atlas
# IT CMS Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/it-cms
# LHCONE Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/lhcone-all
# ND Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/nd-all
# OPN Config		http://myosg.grid.iu.edu/psmesh/json/name/opn-all
# RU Config		http://myosg.grid.iu.edu/psmesh/json/name/ru-all
# TW Config		http://myosg.grid.iu.edu/psmesh/json/name/tw-all
# UK Config		http://myosg.grid.iu.edu/psmesh/json/name/uk-all
# Bandwidth tests between all WLCG hosts	http://myosg.grid.iu.edu/psmesh/json/name/wlcg-all
# OSG Grid Operations Center Test Mesh Config	http://myosg.grid.iu.edu/psmesh/json/name/osg-goc
# perfSONAR Testbed				http://myosg.grid.iu.edu/psmesh/json/name/ps-testbed
# Dual-Stack Mesh Config			http://myosg.grid.iu.edu/psmesh/json/name/dual-stack
# Latin America Config				http://myosg.grid.iu.edu/psmesh/json/name/la-all
# Latency tests between all WLCG hosts		http://myosg.grid.iu.edu/psmesh/json/name/wlcg-latency-all
# Debug Mesh (temp)				http://myosg.grid.iu.edu/psmesh/json/name/DebugMesh
# Belle II Mesh					http://myosg.grid.iu.edu/psmesh/json/name/BelleII
# Global Mesh					http://myosg.grid.iu.edu/psmesh/json/name/global
# All Mesh config				http://myosg.grid.iu.edu/psmesh/all

use strict;
use warnings;

use JSON;
use FindBin qw($Bin);

# Read the config values
my $conf_file = "$Bin/../conf/verify.conf";
my %config = read_conf($conf_file);

# Config variables
my $DATA=$config{DATA};
my $MESHES=$config{MESHES};
my $PSMESH_LINK=$config{PSMESH_LINK};
$DATA = "$Bin/../$DATA";

my $fh;
open($fh, '>', "$DATA/$MESHES");
update_meshes();

# ---

sub read_conf {
    my $conf_file = shift;

    my $ch=undef;
    my %config=();
    open( $ch, '<', $conf_file ) or die "Could not open configuration file '$conf_file'.\n";
    while (<$ch>) {
        next if ( $_ =~ m/^#/ );
        chomp $_;
        if ( $_ =~ m/=/ ) {
            my ($param,$value) = split('=', $_);
            my $junk;
            ($value,$junk) = split('#', $value); # ignore inline comments
            $param =~ s/^\s+|\s+$//g;            # do left/right space trim
            $value =~ s/^\s+|\s+$//g;
            $config{$param} = $value;
        }
    }
    close $ch;
    return %config;
}


# Obtain all mesh links, available in the form:
# [
#     {
#         include: [
#         "http://myosg.grid.iu.edu/psmesh/json/name/us-atlas"
#         ]
#     },
# ...
# ]
sub update_meshes {
    my %mm = ();

    # Obtain mesh list
    my $mesh_links = decode_json(`curl -s $PSMESH_LINK | python -mjson.tool`);
    foreach my $link (@{$mesh_links}) {
        # Obtain mesh members
        my $member_md = decode_json(`curl -s "$link->{include}->[0]" | python -mjson.tool`);
        foreach my $test (@{$member_md->{tests}}) {
            $mm{$test->{description}} = $test->{members};
        }
    }
    
    # Encode hash
    my $jm = JSON->new->allow_nonref;
    my $jm_text = $jm->encode(\%mm);

    # Output results
    print $fh "$jm_text\n";
}
